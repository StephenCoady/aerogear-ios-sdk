import AGSCore
import Foundation

/**
 AeroGear Services Auth SDK
 
 Allows users to perform login/logout actions against an Keycloak service provisioned by the AeroGear mobile service on OpenShift.
 
 ### Example ###
 ````
 // init the auth service instance
 let authConfig = AuthenticationConfig(redirectURL: "com.youapp://callback")
 AgsAuth.instance.configure(authConfig: authConfig)

 //now login
 AgsAuth.instance.login()
 ````
 */
open class AgsAuth {
    private static let serviceId = "keycloak"

    public static let instance: AgsAuth = {
        let config = AgsCore.instance.getConfiguration(serviceId);
        return AgsAuth(config)
    }();

    /** Errors generated by the auth module */
    public enum Errors: Error {
        /** Thrown when user auth configuration is missing */
        case serviceNotConfigured
        /** Thrown when Auth config is missing in mobile-services.json */
        case missingConfig
        /** No logged user */
        case noLoggedInUserError
        /** No idenity token */
        case noIdentityTokenError
    }

    private let credentialManager: CredentialsManager
    private var authenticator: Authenticator?
    
    private let serviceConfig: MobileService?
    private var keycloakConfig: KeycloakConfig?

    private var configured: Bool {
        get {
            return keycloakConfig != nil;
        }
    };
    
    /**
     Initialise the auth SDK
     
     - parameters:
         - mobileConfig: the configuration for the auth service from the service definition file
     */
    init(_ mobileConfig: MobileService?) {
        self.serviceConfig = mobileConfig
        credentialManager = CredentialsManager()
    }

    /**
     Configure the auth module. It should be called before any other functions call be used. Only need to call this once.
     
     - parameters:
         - authConfig: Configuration options for the auth module
     */
    public func configure(authConfig: AuthenticationConfig) throws {
        if let config = serviceConfig {
            guard configured else{
                keycloakConfig = KeycloakConfig(config, authConfig)
                authenticator = OIDCAuthenticator(http: AgsCore.instance.getHttp(), keycloakConfig: keycloakConfig!, authConfig: authConfig, credentialManager: credentialManager)
                return;
            }
            AgsCore.logger.warning("Auth SDK configure method called more than once.")
        } else {
            throw Errors.missingConfig
        }
    }

    /**
     Perform user login action.
     
     - parameters:
         - presentingViewController: the ViewController that initiates the login process
         - onCompleted: callback function that will be invoked when the login is finished
     */
    public func login(presentingViewController: UIViewController, onCompleted: @escaping (User?, Error?) -> Void) throws {
        guard configured else {
            throw Errors.serviceNotConfigured
        }
        authenticator!.authenticate(presentingViewController: presentingViewController, onCompleted: onCompleted)
    }

    /**
     Resume the authentication process. This function should be called when user finished login using the browser and redirected back to the app that started the login.
     
     - parameters:
         - url: The redirect url passed backed from the login process
     
     - returns:
     If the login process can be resumed
     */
    public func resumeAuth(url: URL) throws -> Bool {
        guard configured else {
            throw Errors.serviceNotConfigured
        }
        return authenticator!.resumeAuth(url: url)
    }

    /**
     Perform the logout action.
     
     - parameters:
         - onCompleted: callback function that will be invoked when the logout process is completed
     */
    public func logout(onCompleted: @escaping (Error?) -> Void) throws {
        guard configured else {
            throw Errors.serviceNotConfigured
        }
        if let currentUser = try? currentUser() {
            authenticator!.logout(currentUser: currentUser!, onCompleted: onCompleted)
        } else {
            onCompleted(Errors.noLoggedInUserError)
        }
    }

    /**
     Get the current logged in user.
     
     - returns:
     The user that is currently logged in
     */
    public func currentUser() throws -> User? {
        guard configured else {
            throw Errors.serviceNotConfigured
        }
        guard  let currentCredential = credentialManager.load() else {
            return nil
        }
        guard let user = User(credential: currentCredential, clientName: keycloakConfig!.clientID) else {
            return nil
        }
        return user
    }
}
